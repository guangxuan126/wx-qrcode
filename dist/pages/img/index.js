'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
var QR = require('../../utils/qrcode.js');
exports.default = Page({
  data: {
    '__code__': {
      readme: ''
    },

    img: "",
    $loading: {
      isShow: false
    }
  },
  showLoading: function showLoading() {
    var _this = this;

    this.setData({
      $loading: {
        isShow: true
      }
    });
    setTimeout(function () {
      _this.setData({
        $loading: {
          isShow: false
        }
      });
    }, 2000);
    var that = this;
    var gendetail = getApp().globalData.gendetail;
    that.setData({
      maskHidden: false
    });
    var st = setTimeout(function () {
      wx.hideToast();
      var size = that.setCanvasSize();
      that.createQrCode(gendetail, "mycanvas", size.w, size.h);
      that.setData({
        isDisabled: false,
        isDisabled1: true,
        maskHidden: true
      });
      clearTimeout(st);
    }, 1800);
  },

  onLoad: function onLoad(e) {
    var that = this;
    var gendetail = getApp().globalData.gendetail;
    console.log(gendetail);
    this.setData({
      gendetail: gendetail,
      isDisabled: true,
      isDisabled1: false
    });
    var size = this.setCanvasSize();
  },
  setCanvasSize: function setCanvasSize() {
    var size = {};
    try {
      var res = wx.getSystemInfoSync();
      var scale = 750 / 686;
      var width = res.windowWidth / scale;
      var height = width;
      size.w = width;
      size.h = height;
    } catch (e) {
      console.log("获取设备信息失败" + e);
    }
    return size;
  },
  createQrCode: function createQrCode(gendetail, canvasId, cavW, cavH) {
    var _this2 = this;

    QR.api.draw(gendetail, canvasId, cavW, cavH);
    setTimeout(function () {
      _this2.canvasToTempImage();
    }, 1000);
  },
  canvasToTempImage: function canvasToTempImage() {
    var that = this;
    wx.canvasToTempFilePath({
      canvasId: 'mycanvas',
      success: function success(res) {
        var tempFilePath = res.tempFilePath;
        console.log(tempFilePath);
        that.setData({
          imagePath: tempFilePath
        });
      },
      fail: function fail(res) {
        console.log(res);
      }
    });
  },
  previewImg: function previewImg(e) {
    var img = this.data.imagePath;
    console.log(img);
    wx.previewImage({
      current: 'img',
      urls: [img]
    });
  },
  gen: function gen(e) {
    var that = this;
    var gendetail = getApp().globalData.gendetail;
    that.setData({
      maskHidden: false
    });
    var st = setTimeout(function () {
      wx.hideToast();
      var size = that.setCanvasSize();
      that.createQrCode(gendetail, "mycanvas", size.w, size.h);
      that.setData({
        maskHidden: true
      });
      clearTimeout(st);
    }, 100);
  },
  save: function save(e) {
    wx.canvasToTempFilePath({
      canvasId: 'mycanvas',
      success: function success(res) {
        var tempFilePath = res.tempFilePath;
        wx.saveImageToPhotosAlbum({
          filePath: res.tempFilePath,
          success: function success(data) {
            console.log(data);
            wx.showModal({
              title: '提示',
              content: '保存成功',
              showCancel: false,
              confirmText: '确认'
            });
          },
          fail: function fail(err) {
            console.log(err);
          }
        });
      },
      fail: function fail(res) {
        console.log(res);
      }
    });
  },
  onShareAppMessage: function onShareAppMessage() {
    return {
      title: 'QR二维码',
      path: '/pages/home/index',
      imageUrl: 'https://images.gxuann.cn/qrcode/share.png'
    };
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,